generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                String                      @unique()
}

model Theme {
  id                Int                         @id @default(autoincrement())
  name              String
  description       String
  slug              String                      @unique
  indicators        IndicatorsOnThemes[]
  problems          ProblemsOnThemes[]
  predictionMarkets ThemesToPredictionMarkets[]
}

model Problem {
  id                Int                           @id @default(autoincrement())
  name              String
  description       String
  slug              String                        @unique
  indicators        IndicatorsOnProblems[]
  themes            ProblemsOnThemes[]
  predictionMarkets ProblemsToPredictionMarkets[]
}

model Indicator {
  id                Int                             @id @default(autoincrement())
  name              String
  description       String                          @default("No description. Add one!")
  slug              String                          @unique
  favourite         Boolean
  config            Config?
  problems          IndicatorsOnProblems[]
  themes            IndicatorsOnThemes[]
  predictionMarkets IndicatorsToPredictionMarkets[]
  supportingConfigs SupportingIndicatorsOnConfigs[]
}

model Config {
  id                   Int                             @id @default(autoincrement())
  indicatorId          Int                             @unique
  layout               String                          @default("SINGLE")
  indicator            Indicator                       @relation(fields: [indicatorId], references: [id])
  chartType            String                          @default("line")
  xName                String                          @default("no name set")
  xType                String                          @default("linear")
  yName                String                          @default("no name set")
  yType                String                          @default("linear")
  yFormat              String                          @default("number")
  additionalIndicators SupportingIndicatorsOnConfigs[]
}

model PredictionMarket {
  id           Int                             @id @default(autoincrement())
  question     String
  slug         String                          @unique
  description  String
  marketVolume Int                             @default(0)
  author       String
  dateCreated  DateTime                        @default(now())
  favourite    Boolean
  indicators   IndicatorsToPredictionMarkets[]
  problems     ProblemsToPredictionMarkets[]
  themes       ThemesToPredictionMarkets[]
}

model ThemesToPredictionMarkets {
  themeId            Int
  predictionMarketId Int
  predictionMarket   PredictionMarket @relation(fields: [predictionMarketId], references: [id])
  theme              Theme            @relation(fields: [themeId], references: [id])

  @@id([themeId, predictionMarketId])
}

model ProblemsToPredictionMarkets {
  problemId          Int
  predictionMarketId Int
  predictionMarket   PredictionMarket @relation(fields: [predictionMarketId], references: [id])
  problem            Problem          @relation(fields: [problemId], references: [id])

  @@id([problemId, predictionMarketId])
}

model IndicatorsToPredictionMarkets {
  indicatorId        Int
  predictionMarketId Int
  indicator          Indicator        @relation(fields: [indicatorId], references: [id])
  predictionMarket   PredictionMarket @relation(fields: [predictionMarketId], references: [id])

  @@id([indicatorId, predictionMarketId])
}

model SupportingIndicatorsOnConfigs {
  indicatorId Int
  configId    Int
  config      Config    @relation(fields: [configId], references: [id])
  indicator   Indicator @relation(fields: [indicatorId], references: [id])

  @@id([indicatorId, configId])
}

model ProblemsOnThemes {
  themeId   Int
  problemId Int
  problem   Problem @relation(fields: [problemId], references: [id])
  theme     Theme   @relation(fields: [themeId], references: [id])

  @@id([themeId, problemId])
}

model IndicatorsOnThemes {
  themeId     Int
  indicatorId Int
  indicator   Indicator @relation(fields: [indicatorId], references: [id])
  theme       Theme     @relation(fields: [themeId], references: [id])

  @@id([themeId, indicatorId])
}

model IndicatorsOnProblems {
  problemId   Int
  indicatorId Int
  indicator   Indicator @relation(fields: [indicatorId], references: [id])
  problem     Problem   @relation(fields: [problemId], references: [id])

  @@id([problemId, indicatorId])
}
